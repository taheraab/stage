"use strict";(self.webpackChunk_amboss_design_system=self.webpackChunk_amboss_design_system||[]).push([[704],{"./.storybook/helpers/createStory.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{D:()=>createStory});const createStory=(args,story)=>(void 0!==args&&(story.args=args),story.parameters={controls:{include:args?Object.keys(args):[]}},story)},"./src/components/SegmentedProgressBar/SegmentedProgressBar.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllVariantsProgressBar:()=>AllVariantsProgressBar,EmptyProgressBar:()=>EmptyProgressBar,OneVariantProgressBar:()=>OneVariantProgressBar,SquaredProgressBar:()=>SquaredProgressBar,ThinProgressBar:()=>ThinProgressBar,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var _storybook_helpers_createStory__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./.storybook/helpers/createStory.ts"),_SegmentedProgressBar__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/SegmentedProgressBar/SegmentedProgressBar.tsx"),_storybook_constants__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./.storybook/constants.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/SegmentedProgressBar",component:_SegmentedProgressBar__WEBPACK_IMPORTED_MODULE_2__.t,args:{weight:"thin",squareCorners:!1,maxValue:100},parameters:{badges:[_storybook_constants__WEBPACK_IMPORTED_MODULE_3__.QV.WIP]}},BaseSegmentedProgressBarTemplate=_ref=>{let{...rest}=_ref;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div",{style:{width:800},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_SegmentedProgressBar__WEBPACK_IMPORTED_MODULE_2__.t,{...rest})})};BaseSegmentedProgressBarTemplate.displayName="BaseSegmentedProgressBarTemplate";const AllVariantsProgressBar=(0,_storybook_helpers_createStory__WEBPACK_IMPORTED_MODULE_4__.D)({values:{success:30,warning:20,alert:10}},BaseSegmentedProgressBarTemplate.bind({})),OneVariantProgressBar=(0,_storybook_helpers_createStory__WEBPACK_IMPORTED_MODULE_4__.D)({values:{success:66}},BaseSegmentedProgressBarTemplate.bind({})),EmptyProgressBar=(0,_storybook_helpers_createStory__WEBPACK_IMPORTED_MODULE_4__.D)({values:{}},BaseSegmentedProgressBarTemplate.bind({})),ThinProgressBar=(0,_storybook_helpers_createStory__WEBPACK_IMPORTED_MODULE_4__.D)({values:{success:30,warning:20,alert:10},height:"thin"},BaseSegmentedProgressBarTemplate.bind({})),SquaredProgressBar=(0,_storybook_helpers_createStory__WEBPACK_IMPORTED_MODULE_4__.D)({values:{success:30,warning:20,alert:10},squareCorners:!0},BaseSegmentedProgressBarTemplate.bind({}));AllVariantsProgressBar.parameters={...AllVariantsProgressBar.parameters,docs:{...AllVariantsProgressBar.parameters?.docs,source:{originalSource:"createStory({\n  values: {\n    success: 30,\n    warning: 20,\n    alert: 10\n  }\n}, BaseSegmentedProgressBarTemplate.bind({}))",...AllVariantsProgressBar.parameters?.docs?.source}}},OneVariantProgressBar.parameters={...OneVariantProgressBar.parameters,docs:{...OneVariantProgressBar.parameters?.docs,source:{originalSource:"createStory({\n  values: {\n    success: 66\n  }\n}, BaseSegmentedProgressBarTemplate.bind({}))",...OneVariantProgressBar.parameters?.docs?.source}}},EmptyProgressBar.parameters={...EmptyProgressBar.parameters,docs:{...EmptyProgressBar.parameters?.docs,source:{originalSource:"createStory({\n  values: {}\n}, BaseSegmentedProgressBarTemplate.bind({}))",...EmptyProgressBar.parameters?.docs?.source}}},ThinProgressBar.parameters={...ThinProgressBar.parameters,docs:{...ThinProgressBar.parameters?.docs,source:{originalSource:'createStory({\n  values: {\n    success: 30,\n    warning: 20,\n    alert: 10\n  },\n  height: "thin"\n}, BaseSegmentedProgressBarTemplate.bind({}))',...ThinProgressBar.parameters?.docs?.source}}},SquaredProgressBar.parameters={...SquaredProgressBar.parameters,docs:{...SquaredProgressBar.parameters?.docs,source:{originalSource:"createStory({\n  values: {\n    success: 30,\n    warning: 20,\n    alert: 10\n  },\n  squareCorners: true\n}, BaseSegmentedProgressBarTemplate.bind({}))",...SquaredProgressBar.parameters?.docs?.source}}};const __namedExportsOrder=["AllVariantsProgressBar","OneVariantProgressBar","EmptyProgressBar","ThinProgressBar","SquaredProgressBar"]},"./src/components/SegmentedProgressBar/SegmentedProgressBar.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{t:()=>SegmentedProgressBar});var emotion_styled_base_browser_esm=__webpack_require__("./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js");__webpack_require__("./node_modules/react/index.js");const variants=["success","warning","alert"],getPercentagesForVariants=(maxValue,values)=>{const result=variants.map((variant=>{const percentage=100*values[variant]/maxValue;return percentage>0?{percentage,style:variant}:null})),usedPercentage=result.reduce(((currentValue,item)=>currentValue+(item?item.percentage:0)),0);return usedPercentage<100&&result.push({percentage:100-usedPercentage,style:"inProgress"}),result.filter(Boolean)},sanitizeInputValues=(maxValue,values)=>{const totalFilledValue=(values=>variants.reduce(((currentValue,variant)=>values[variant]&&values[variant]>0?currentValue+values[variant]:currentValue),0))(values),sanitizedMaxValue=maxValue>totalFilledValue?maxValue:totalFilledValue,sanitizedValues={};return variants.forEach((variant=>{sanitizedValues[variant]=values[variant]&&values[variant]>0?values[variant]:0})),{sanitizedMaxValue,sanitizedValues}};var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const defaultProps={"data-e2e-test-id":void 0,weight:"fat",squareCorners:!1,privateProps:{monochrome:!1}},getBackgroundColor=(theme,style,monochrome)=>{switch(style){case"success":return monochrome?theme.values.color.segementedProgressBar.monochrome:theme.values.color.segementedProgressBar.success;case"warning":return monochrome?theme.values.color.segementedProgressBar.monochrome:theme.values.color.segementedProgressBar.warning;case"alert":return monochrome?theme.values.color.segementedProgressBar.monochrome:theme.values.color.segementedProgressBar.alert;default:return theme.values.color.segementedProgressBar.inProgress}},StyledSegmentedProgressBar=(0,emotion_styled_base_browser_esm.Z)("div",{target:"e101pf3g1"})((_ref=>{let{theme,squareCorners,weight}=_ref;return{width:"100%",display:"flex",flexDirection:"row",borderRadius:squareCorners?0:theme.variables.size.borderRadius.progressBar,overflow:"hidden",height:"thin"===weight?theme.variables.size.spacing.xxs:theme.variables.size.spacing.xs}}),""),StyledSegment=(0,emotion_styled_base_browser_esm.Z)("div",{target:"e101pf3g0"})((_ref2=>{let{theme,styleVariant,percentage,monochrome}=_ref2;return{height:"100%",backgroundColor:getBackgroundColor(theme,styleVariant,monochrome),width:`${percentage}%`}}),"");function SegmentedProgressBar(_ref3){let{maxValue,values,weight,squareCorners,privateProps:{monochrome},"data-e2e-test-id":dataE2eTestId}=_ref3;const{sanitizedMaxValue,sanitizedValues}=sanitizeInputValues(maxValue,values),percentages=getPercentagesForVariants(sanitizedMaxValue,sanitizedValues);return(0,jsx_runtime.jsx)(StyledSegmentedProgressBar,{"data-e2e-test-id":dataE2eTestId,squareCorners,weight,children:percentages.map((_ref4=>{let{percentage,style}=_ref4;return(0,jsx_runtime.jsx)(StyledSegment,{"data-e2e-test-id":style,styleVariant:style,monochrome,percentage},style)}))})}SegmentedProgressBar.displayName="SegmentedProgressBar",SegmentedProgressBar.defaultProps=defaultProps;try{SegmentedProgressBar.displayName="SegmentedProgressBar",SegmentedProgressBar.__docgenInfo={description:"",displayName:"SegmentedProgressBar",props:{maxValue:{defaultValue:null,description:"The value for 100% progress. Consumer does not need to do percentage calculation.\nJust pass this number and some values. The progress bar does all percentag calculations",name:"maxValue",required:!0,type:{name:"number"}},values:{defaultValue:null,description:"The values already progressed. Possible ValuesVariants are used to display progress in a different color.\nVariants are:\nsuccess => green;\nwarning => yellow;\nalert => red",name:"values",required:!0,type:{name:"Partial<Record<ValuesVariant, number>>"}},squareCorners:{defaultValue:{value:"false"},description:"",name:"squareCorners",required:!1,type:{name:"boolean"}},weight:{defaultValue:{value:"fat"},description:"",name:"weight",required:!1,type:{name:"enum",value:[{value:'"thin"'},{value:'"fat"'}]}},privateProps:{defaultValue:{value:"{\n    monochrome: false,\n  }"},description:"",name:"privateProps",required:!1,type:{name:"SegmentedProgressBarPrivateProps"}},"data-e2e-test-id":{defaultValue:{value:"undefined"},description:"",name:"data-e2e-test-id",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/SegmentedProgressBar/SegmentedProgressBar.tsx#SegmentedProgressBar"]={docgenInfo:SegmentedProgressBar.__docgenInfo,name:"SegmentedProgressBar",path:"src/components/SegmentedProgressBar/SegmentedProgressBar.tsx#SegmentedProgressBar"})}catch(__react_docgen_typescript_loader_error){}}}]);